# ===============================================================================
# file_pusher_service.py for FilePusher
# 
# This holds the windows service part of the code for filepusher.  
#
#         !!!CURRENTLY DEPRECATED!!!
#
# for use with python 3.5
# ===============================================================================

from threading import Thread


class FilePusherSvc(win32serviceutil.ServiceFramework):  
    # you can NET START/STOP the service by the following name  
    _svc_name_ = "FilePusher Service"  
    # this text shows up as the service name in the Service  
    # Control Manager (SCM)  
    _svc_display_name_ = "File Pusher Service"  
    # this text shows up as the description in the SCM  
    _svc_description_ = "This service pushes files from capstage to other places."  
          
    def __init__(self, args):  
        win32serviceutil.ServiceFramework.__init__(self, args)  
        # create an event to listen for stop requests on  
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)
        self.log('init')
        self.stop_event = win32event.CreateEvent(None, 0, 0, None)

    def log(self, msg):
        import servicemanager
        servicemanager.LogInfoMsg(str(msg))

    def sleep(self, sec):
        win32api.Sleep(sec*1000, True)

    def SvcDoRun(self):
        self.ReportServiceStatus(win32service.SERVICE_START_PENDING)
        try:
            self.ReportServiceStatus(win32service.SERVICE_RUNNING)
            self.log('Starting')
            self.start()
            self.log('And Wait')
            win32event.WaitForSingleObject(self.stop_event, win32event.INFINITE)
            self.log('diggity Done.')
        except Exception as x:
            self.log('Exception : %s' % x)
            self.SvcStop()                               
  
    # called when we're being shut down      
    def SvcStop(self):
        try:
            self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
            self.log('stopping')
            self.stop()
            self.log('stopped')
            win32event.SetEvent(self.stop_event)
            self.ReportServiceStatus(win32service.SERVICE_STOPPED)
        except Exception as x:
            self.log('Exception : %s' % x)
     
    def start(self): 
        watcher = WatchFolder
        thread = Thread(target = watcher.start_observer)
        thread.start()
        self.log("Inside start code.")

    def stop(self): 
        pass            
      
    def ctrlHandler(ctrlType):
       return True

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(FilePusherSvc)